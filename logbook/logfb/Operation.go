// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package logfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Operation struct {
	_tab flatbuffers.Table
}

func GetRootAsOperation(buf []byte, offset flatbuffers.UOffsetT) *Operation {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Operation{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Operation) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Operation) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Operation) Type() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Operation) MutateType(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *Operation) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Operation) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *Operation) Ref() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Operation) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Operation) Prev() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Operation) Size() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Operation) MutateSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *Operation) Revisions() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Operation) MutateRevisions(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *Operation) Destination() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Operation) Note() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func OperationStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func OperationAddType(builder *flatbuffers.Builder, type_ uint16) {
	builder.PrependUint16Slot(0, type_, 0)
}
func OperationAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(1, timestamp, 0)
}
func OperationAddRef(builder *flatbuffers.Builder, ref flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(ref), 0)
}
func OperationAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(name), 0)
}
func OperationAddPrev(builder *flatbuffers.Builder, prev flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(prev), 0)
}
func OperationAddSize(builder *flatbuffers.Builder, size int32) {
	builder.PrependInt32Slot(5, size, 0)
}
func OperationAddRevisions(builder *flatbuffers.Builder, revisions int32) {
	builder.PrependInt32Slot(6, revisions, 0)
}
func OperationAddDestination(builder *flatbuffers.Builder, destination flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(destination), 0)
}
func OperationAddNote(builder *flatbuffers.Builder, note flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(note), 0)
}
func OperationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
